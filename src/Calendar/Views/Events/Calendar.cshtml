@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@using Calendar.Models.CalendarViewModels
@using Calendar.Helpers
@using Calendar.Services

@model IEnumerable<CalendarEventViewModel>

@inject Calendar.Models.Services.EventStatisticsService EventStatsService   /* want to find sometime to tidy this up */
@inject Calendar.Controllers.AppSettingsController appsettings

@{
    Layout = "_LayoutCalendar";
    ViewData["Title"] = "Calendar";
}

@{
    const int DAYSINAWEEK = 7;
    const int MAX_GRIDEVENTROW = 6;

    DateTime ViewDate = ViewBag.ViewDate;               // Point of View, POV.
    DateTime FirstDateofTheMonth, LastDateofTheMonth;
    DateTime FirstDateOfTheCalendar, LastDateOfTheCalendar;

    DateTime ViewDate_Prev = ViewDate.AddMonths(-1);    //Going backward "<"
    DateTime ViewDate_Next = ViewDate.AddMonths(1);     //Going forward  ">"


    /* Initializing the variables */
    FirstDateofTheMonth = new DateTime(ViewDate.Year, ViewDate.Month, 1);
    LastDateofTheMonth = new DateTime(ViewDate.Year, ViewDate.Month, 1).AddMonths(1).AddDays(-1).AddHours(23).AddMinutes(59).AddSeconds(59);

    FirstDateOfTheCalendar = FirstDateofTheMonth.AddDays((int)FirstDateofTheMonth.DayOfWeek * -1);
    LastDateOfTheCalendar = LastDateofTheMonth.Date.AddDays(DAYSINAWEEK - 1 - (int)LastDateofTheMonth.DayOfWeek).AddHours(23).AddMinutes(59).AddSeconds(59);

    /* Number of rows in the calendar for current POV. */
    int NumOfCalRow = (int)Math.Ceiling(((LastDateOfTheCalendar.Date - FirstDateOfTheCalendar.Date).TotalDays + 1) / DAYSINAWEEK);

    /* Provide summary figures on Event,Team,Project */
    EventStatsService.Initialize(FirstDateOfTheCalendar, LastDateOfTheCalendar);

    string UserName = (User.Identity.IsAuthenticated)? User.Claims.Where(m => m.Type == "username").SingleOrDefault().Value : "";
}

@* Local functions for this View *@

@functions{

            /* See if we can find the earliest coming event for review. */

            int reviewEventID = 0;

            /* Retrieve the CSS class for 'Today' */
            public string GetTodayCSS(DateTime pFirstDateofTheMonth, int pDay, string pCssPrefix)
            {
                if (pFirstDateofTheMonth.AddDays(pDay - 1).Date == DateTime.Now.Date)
                {
                    return pCssPrefix + "-today";
                }
                return string.Empty;
            }

            /* Retrieve the Next Event to be painted in the Calendar for a given date */
            /* Version 2 which should be able to handler across month */
            public CalendarEventViewModel GetNextEventByDate(DateTime pDate)
            {
                foreach (var item in Model)
                {
                    {
                        if (item.Event.StartDateTime.Date == pDate.Date && !item.MarkedInCalendar)
                        {
                            /* found the earliest coming event for the review funciton */
                            if (ViewBag.ReviewDirection >= 0)
                            {
                                if (reviewEventID == 0 && pDate.Date >= DateTime.Now.Date)
                                    reviewEventID = item.Event.ID;
                            }
                            else
                            {
                                if (pDate.Date >= DateTime.Now.Date)
                                    reviewEventID = item.Event.ID;
                            }

                            return item;
                        }
                    }
                }
                return null;
            }

            /* Check if there is still event for a particular row in the calendar */
            public bool MonthRowEventExhausted(DateTime pRowStart)
            {
                var e = Model.Where(m => (m.MarkedInCalendar == false && m.Event.StartDateTime.Date >= pRowStart.Date && m.Event.StartDateTime.Date <= pRowStart.Date.AddDays(6)));

                return (e.Count() == 0);
            }

            /* Return the Popover Content */
            public string GetPopoverContent(CalendarEventViewModel pCalEvt)
            {
                Event pEvt = pCalEvt.Event;

                string IA_URL = appsettings.IA_Url; /* Impact Analysis URL */
                string CM_URL = appsettings.CM_Url; /* Operation Team Change Management URL */

                var content = "<table>";
                content += "<tr><th valign=top>Subject </th><td>" + pEvt.Subject + "</td></tr>";
                content += "<tr><th nowrap valign=top>Short Desc. </th><td>" + pEvt.TaskDescription + "</td></tr>";
                content += "<tr><th valign=top>Hosts </th><td>" + pEvt.AffectedHosts.Replace(",", ", ")
                    + "<a target=_blank href=" + IA_URL + "?broken=true&server=" + Uri.EscapeDataString(pEvt.AffectedHosts) + ">"
                    + "<span class='glyphicon glyphicon-flash' style='color:red' data-toggle='tooltip' data-placement='top' title='Perform Impact Analysis'></span></a></td></tr>";
                content += "<tr><th valign=top>Projects </th><td>" + pEvt.AffectedProjects.Replace(",", ", ")
                        + "<a target=_blank href=" + IA_URL + "?system=" + Uri.EscapeDataString(pEvt.AffectedProjects) + ">"
                        + "<span class='glyphicon glyphicon-flash' style='color:red' data-toggle='tooltip' data-placement='top' title='Perform Impact Analysis'></span></a></td></tr>";
                content += "<tr><th valign=top>Teams </th><td>" + pEvt.AffectedTeams.Replace(",", ", ") + "</td></tr>";
                content += "<tr><th valign=top>Risk </th><td><span class='cal-risklevel-" + pEvt.RiskLevel + "'>" + pCalEvt.RiskLevel + "</span></td></tr>";
                content += "<tr><th valign=top>Status </th><td>" + pCalEvt.EventStatus + "</td></tr>";
                content += "<tr><th valign=top>Reference </th><td><a target=_blank href=" + CM_URL + "?i_CRN=" + pEvt.Reference + ">" + pEvt.Reference + "</a></td></tr>";
                content += "<tr><th valign=top>Results </th><td>" + pEvt.Result + "</td></tr></table>";
                content += "<div class='small'><i>Last Updated " + pEvt.UpdatedDate + "</i></div>";
                /*
                        if (User.IsInRole(Constants.ROLE_ADMIN))
                        {
                            content += "<hr><a class='btn btn-primary btn-sm btn-block' href='Edit?id=" + pEvt.ID + "&redir=" + Uri.EscapeDataString("Calendar?year=" + ViewBag.ViewDate.Year + "&month=" + ViewBag.ViewDate.Month) + "'>Edit Event Details</a>";
                        } else
                        {
                            content += "<hr><a class='btn btn-primary btn-sm btn-block' href='Details?id=" + pEvt.ID + "&redir=" + Uri.EscapeDataString("Calendar?year=" + ViewBag.ViewDate.Year + "&month=" + ViewBag.ViewDate.Month) + "'>View Event Details</a>";
                        }
                */
                return content;
            }
        }

<div class="container-fluid">
    <div class="row" style="margin:2px"></div>    
    <div class="row" >
        <!-- navigator menu on the left -->
        <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2 nopadding">
                <div id="teamtree"></div>
        </div>
        <div class="col-xs-10 col-sm-10 col-md-10 col-lg-10" style="padding:0 0 0 15px">
          <div class="row">
            <div class="col-xs-4 col-sm-4 col-md-3 col-lg-4">
                <div class="row">
                    <div class="col-md-2" >
                        <a class="btn btn-primary glyphicon glyphicon-calendar" asp-action="Calendar" role="button" title="Show Today"></a>
                    </div>
                    <div class="col-md-2 nopadding text-right">
                        <form class="form-inline" asp-action="Calendar" method="get">
                            <input type="hidden" name="year" value="@ViewDate_Prev.Year" />
                            <input type="hidden" name="month" value="@ViewDate_Prev.Month" />
                            <input type="hidden" id="idPrevFilterProject" name="FilterProject" value="@ViewBag.FilterProject" />
                            <button type="submit" class="btn btn-primary glyphicon glyphicon-chevron-left"></button>
                        </form>
                    </div>
                    <div class="col-md-2 nopadding text-left">
                        <form class="form-inline" asp-action="Calendar" method="get">
                            <input type="hidden" name="year" value="@ViewDate_Next.Year" />
                            <input type="hidden" name="month" value="@ViewDate_Next.Month" />
                            <input type="hidden" id="idNextFilterProject" name="FilterProject" value="@ViewBag.FilterProject" />
                            <button type="submit" class="btn btn-primary glyphicon glyphicon-chevron-right"></button>
                        </form>
                    </div>
                    <div class="col-md-2 nopadding">
                        <button id="idShowModalEvent" class="btn btn-primary glyphicon glyphicon-eye-open" @(LastDateofTheMonth >= DateTime.Now  ? "" :"disabled") role="button" title="Review Up Coming Events" data-toggle="modal" data-target="#idEventDetailsModal"></button>
                    </div>                    
                </div>
            </div>
            <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 text-center">
                <lable class="m-title">@ViewDate.ToString("MMMM yyyy")</lable>
            </div>
            <div class="col-xs-4 col-sm-4 col-md-5 col-lg-4 text-right">
                <div class="form-group" onsubmit="return false;">
                    <form class="form-inline">
                        <label for="idFilterProject" style="display:none">Project</label> <input type="text" id="idFilterProject" name="FilterProject" value="@ViewBag.FilterProject" placeholder="e.g. ERP" class="form-control" title="Filter by Project" autofocus>
                        <!--
                        <input type="hidden" name="year" value="@ViewDate.Year"/>
                        <input type="hidden" name="month" value="@ViewDate.Month" />
                        -->
                        <button type="button" class="btn btn-primary" onclick="doFilter(); return false;">Filter</button>
                    </form>
                </div>
            </div>
          </div>
          <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <!-- main calenar -->
                    <div id="gridcontainer" class="grid-container">
                        <div class="mv-container">
                            <table id="mvDaynamesTable" class="mv-daynames-table" cellspacing="0" cellpadding="0">
                                <tbody>
                                    <tr>
                                        <th class="mv-dayname" title="Sun">Sun</th>
                                        <th class="mv-dayname" title="Mon">Mon</th>
                                        <th class="mv-dayname" title="Tue">Tue</th>
                                        <th class="mv-dayname" title="Wed">Wed</th>
                                        <th class="mv-dayname" title="Thu">Thu</th>
                                        <th class="mv-dayname" title="Fri">Fri</th>
                                        <th class="mv-dayname" title="Sat">Sat</th>
                                    </tr>
                                </tbody>
                            </table>
                            @{
                                int offset = (int)FirstDateofTheMonth.DayOfWeek * -1 + 1;
                                int lastday = LastDateofTheMonth.Day;

                                double RowHeightPCent, RowTop;
                                DateTime bgcaldate = FirstDateOfTheCalendar;
                                DateTime gridcaldate = FirstDateOfTheCalendar;  // displaying the day in each cell of the calendar, starting from FirstDateOfTheCalendar.         

                                RowHeightPCent = 100.0 / NumOfCalRow;

                                <div id="mvEventContainer" class="mv-event-container" style="height:700px;">
                                    @for (var row = 0; row < NumOfCalRow; row++)
                                    {
                                        RowTop = row * RowHeightPCent;
                                        <div class="month-row" style="top:@RowTop%;height:@RowHeightPCent%">
                                            <!--Paint the background table first-->
                                            <table class="st-bg-table" cellpadding="0" cellspacing="0">
                                                <tbody>
                                                    <tr>
                                                        @for (var col = 0; col < DAYSINAWEEK; col++)
                                                        {
                                                            int d = col + row * DAYSINAWEEK + offset;

                                                            <td class="st-bg @GetTodayCSS(FirstDateofTheMonth, d, "st-bg") st-create-e" date="@bgcaldate.Day/@bgcaldate.Month/@bgcaldate.Year">&nbsp;</td>
                                                            bgcaldate = bgcaldate.AddDays(1);
                                                            /*
                                                            if (d >= 1 && d <= lastday)
                                                            {
                                                                <td class="st-bg @GetTodayCSS(FirstDateofTheMonth, d, "st-bg")">&nbsp;</td>
                                                            }
                                                            else
                                                            {
                                                                <td class="st-bg">&nbsp;</td>
                                                            }
                                                            */
                                                        }
                                                    </tr>
                                                </tbody>
                                            </table>
                                            <!--Tehn, paint the events table-->
                                            <table class="st-grid" cellpadding="0" cellspacing="0">
                                                <tbody>
                                                    <tr>
                                                        @for (var col = 0; col < DAYSINAWEEK; col++)
                                                        {
                                                            int d = col + row * DAYSINAWEEK + offset;
                                                            if (d >= 1 && d <= lastday)
                                                            {
                                                                <td class="st-dtitle @GetTodayCSS(FirstDateofTheMonth, d, "st-dtitle")">@d</td>
                                                            }
                                                            else
                                                            {
                                                                <td class="st-dtitle st-dtitle-nonmonth @GetTodayCSS(FirstDateofTheMonth, d, "st-dtitle")">@gridcaldate.Day</td>
                                                            }
                                                            gridcaldate = gridcaldate.AddDays(1);
                                                        }
                                                    </tr>

                                                    @for (var grid_row = 0; grid_row < MAX_GRIDEVENTROW; grid_row++)
                                                    {
                                                        /* There will be multiple events within the same day.
                                                         We only display the first MAX_GRIDEVENTROW events on a single day.
                                                        */
                                                        DateTime caldate = FirstDateOfTheCalendar.AddDays(row * DAYSINAWEEK);

                                                        if (MonthRowEventExhausted(caldate))
                                                        {
                                                            break;
                                                        }
                                                        <tr>
                                                            @for (var col = 0; col < DAYSINAWEEK; col++)
                                                            {
                                                                int NumOfDays = 1;
                                                                int d = caldate.Day;
                                                                {
                                                                    int ColSpan = 1;

                                                                    /* Get the first event of the date */
                                                                    var ce = GetNextEventByDate(caldate);
                                                                    if (ce != null)
                                                                    {
                                                                        var e = ce.Event;

                                                                        /* Now, calculate the colspan of event. 
                                                                         * e.g. 1-Feb-2017 0:00 to 5-Feb-2017 0:00 => colspan=4,0
                                                                         *      1-Feb-2017 0:00 to 5-Feb-2017 3:00 => colspan=4,1
                                                                         */
                                                                        //int NumOfDays = (int)Math.Ceiling((e.EndDateTime - e.StartDateTime).TotalDays);

                                                                        NumOfDays = (int)(e.EndDateTime.Date - e.StartDateTime.Date).TotalDays + 1;
                                                                        if (e.EndDateTime == e.EndDateTime.Date) /* for those end date with timestamp 0:00, it should not be counted as one day */
                                                                        {
                                                                            NumOfDays -= 1;
                                                                        }
                                                                        if (NumOfDays <= DAYSINAWEEK - (int)e.StartDateTime.DayOfWeek)
                                                                        {
                                                                            ColSpan = NumOfDays;
                                                                            col += (NumOfDays - 1);                         // Advance the col
                                                                        }
                                                                        else
                                                                        {
                                                                            ColSpan = DAYSINAWEEK - (int)e.StartDateTime.DayOfWeek;
                                                                            col = DAYSINAWEEK;                              //Advance the col
                                                                        }

                                                                        var over_title = ((e.RiskLevel == "50") ? "<span class='glyphicon glyphicon-exclamation-sign' style='color:red'></span>" : "") + ce.OriginalStart.ToString("dd-MMM h:mmtt") + " - " + ce.OriginalEnd.ToString("dd-MMM h:mmtt") + " (ID " + ce.Event.ID + ")";
                                                                        var over_content = GetPopoverContent(ce);
                                                                        var over_placement = (row <= 1) ? "bottom" : "top";

                                                                        <td class="st-c" colspan="@ColSpan" date="@caldate.Day/@caldate.Month/@caldate.Year">
                                                                            <div class="st-c-pos">
                                                                         @*
                                                                            @if (!ce.Continue && e.Severity == 1)
    {
                                                                                <span class="glyphicon glyphicon-exclamation-sign" style="color:red;position:absolute;top:-3px;left:-3px"></span>
                                                                            }

                                                                             For Popover,
                                                                                data-trigger='hover'  => dismiss on mouse over
                                                                                data-trigger='focus'  => one click dismiss
                                                                         *@
                                                                                <div class="ca-evp-@e.ID rb-n cal-risklevel-@e.RiskLevel" data-placement=@over_placement data-toggle="popover" data-trigger="hover" data-container="body" data-title="@over_title" data-content="@over_content" data-html="true">
                                                                                    <div class="rb-ni" onclick="doOpenEvent(@e.ID);">
                                                                                        <!--<a style="text-decoration:none; color:#ffffff;" asp-controller="Events" asp-action="Details" asp-route-id="@e.ID">-->
                                                                                        <a style="text-decoration:@((e.EventStatus == Constants.STATUS_CANCELLED)? "line-through": "none"); color:#ffffff;" href="#">                                                                                            
                                                                                                @if (!ce.Continue)
    {
                                                                                                    <span>@e.StartDateTime.ToString("h:mmt").ToLower()</span>
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    <span>...</span>
                                                                                                }
                                                                                                @e.TaskDescription
                                                                                        </a>
                                                                                     </div>
                                                                                </div>
                                                                             </div>
                                                                          </td>

                                                                        if (NumOfDays <= DAYSINAWEEK - (int)e.StartDateTime.DayOfWeek)
                                                                        {
                                                                            ce.MarkedInCalendar = true; /* The whole event is marked in calendar */
                                                                        }
                                                                        else
                                                                        {
                                                                            /* The event expand to next row */
                                                                            e.StartDateTime = e.StartDateTime.Date.AddDays(ColSpan);
                                                                            ce.Continue = true;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        <td class="st-c st-create-e" date="@caldate.Day/@caldate.Month/@caldate.Year">&nbsp;</td>   @* ce is null*@
                                                                    }
                                                                }
                                                                @* Bug fix for event spread more than one day. START *@
                                                                caldate = caldate.AddDays(NumOfDays);
                                                                @* Bug fix END *@
                                                            }   @* for-loop (var col = 0; col < DAYSINAWEEK; col++) *@
                                                        </tr>
                                                    } @* for-loop (var grid_row = 0; grid_row < MAX_GRIDEVENTROW; grid_row++) *@
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" hidden>
        <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2 nopadding">
            <div style="overflow:hidden;">
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-8">
                            <div id="datetimepicker12"></div>
                        </div>
                    </div>
                </div>
                <script type="text/javascript">
                $(function () {
                    $('#datetimepicker12').datetimepicker({
        format: 'lt',
                        inline: true
                    });
    });
                </script>
            </div>
        </div>
    </div>
</div>

@* Below is the Modal for reviewing events *@
<div id="idEventDetailsModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="EventDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="modal-title">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-header nopadding">                    
                    <div class="col-md-9 nopadding text-left">
                        <h2 class="text-muted" id="idmodalEventHeader"></h2>
                    </div>
                    <div class="col-md-3 text-right">
                        <button id="idBtnModelPrevEvent" type="button" class="btn btn-primary btn-sm" onclick="NextEventModal(-1);">Previous</button>
                        <a id="idBtnModelNextEvent" role="button" class="btn btn-primary btn-sm" onclick="NextEventModal(1);">Next</a>
                        <!--<button type="button" class="btn btn-default btn-sm" data-dismiss="modal">Close</button>-->
                    </div>
                </div>
                <div class="row" id="idEventModalContent"></div>
            </div>
        </div>
        <span id="idModalReviewEventId" hidden>@reviewEventID</span>
    </div>
</div>

<script type="text/javascript">
    /* this javascript block is for handling the Reviewing Event Funciton */


    function GetNextEventID(direction, currentEventId) {
        /* get the next event in the given direction. 1 -> foreward, -1 -> backward */
        var comingEventId = 0;

        for (i = 0; i < calevents.length; i++) {
            var ce = calevents[i];
            if (ce.event.id == currentEventId) {
            comingEventId = (direction > 0) ? ce.nextEventID : ce.prevEventID;
            break;
        }
    }
        return comingEventId;
    }

    function NextEventModal(direction) {
        /* #idModalReviewEventId is the current view event id or the default event id when the page is just loaded */
        var modalEvent  = $("#idModalReviewEventId");
        var currentEventId = modalEvent.text();     /* Current reviewing Event ID */
        var comingEventId = GetNextEventID(direction, currentEventId);                      /* Coming Event ID to be reviewed, can be next or previous */

        modalEvent.text(comingEventId);
        /* comingEventId  = 0 means cannot find any coming event on the current calendar to review.
           let's navigate to previous/new for more events. */

        if (comingEventId == 0 && direction < 0) {
            location.href = "Calendar?year=@ViewDate_Prev.Year&month=@ViewDate_Prev.Month&reviewDirection=-1&reviewEventId=" + currentEventId;
        } else if (comingEventId == 0 && direction > 0) {
            location.href = "Calendar?year=@ViewDate_Next.Year&month=@ViewDate_Next.Month&reviewDirection=1&reviewEventId=" + currentEventId;
        } else {
            $("#idEventModalContent").load("Details/" + comingEventId + "?modal=1 #idContainer", updModalHeader);
        }
    };

    $(document).ready(function() {
        /* get the earliest coming event to load into the modal div, if any. */
        var direction = @ViewBag.ReviewDirection;   /* 1: move forward, -1: move backward */
        var lastReviewEventId = ("@ViewBag.ReviewEventId" == "") ? 0 : Number("@ViewBag.ReviewEventId");

        /* update #idModalReviewEventId with either next or previous event id */
        var modalEvent = $("#idModalReviewEventId");
        var currentEventId = modalEvent.text();     /* Current reviewing Event ID */
        var comingEventId;             /* Coming Event ID to be reviewed, can be next or previous */

        /* if direction = 0, we don't need to move and use the currentEventId */
        if ( direction == 0 ) {
            comingEventId = currentEventId;
            if (comingEventId != 0) {
                $("#idEventModalContent").load("Details/" + comingEventId + "?modal=1 #idContainer", updModalHeader);

            } else {
                $("#idmodalEventHeader").text("Press 'Next' for more event(s), if any.");
            }
        } else {
            if (lastReviewEventId == 0)
                comingEventId = currentEventId; /* we came from no where, just use the default event when the page just loaded */
            else {
                comingEventId = GetNextEventID(direction, lastReviewEventId);
                if (comingEventId != 0)
                    modalEvent.text(comingEventId);
                else if (lastReviewEventId != currentEventId)
                    comingEventId = currentEventId;
            }

            /* need to handle if comingEventId == 0. i.e. no more event to review */
            if (comingEventId != 0) {
                $("#idEventModalContent").load("Details/" + comingEventId + "?modal=1 #idContainer", updModalHeader);
                /* if direction is not zero, that means we are moving and need to show the modal right away. */
                $("#idShowModalEvent").trigger('click');
            } else {
                $("#idShowModalEvent").prop('disabled',true);
                $("#idEventDetailsModal").modal('hide');
            }
        }        
        if (@(User.IsInRole(Constants.ROLE_ADMIN)? "true":"false")) {
            $('td.st-create-e').click(function () {
                location.href = "@Context.Request.PathBase/Events/Create?date=" + this.getAttribute('date') + "&redir=" + encodeURIComponent("Calendar?year=@ViewBag.ViewDate.Year&month=@ViewBag.ViewDate.Month");                
            });
        }
    });

    /* Update the Modeal Header with Event Duration */
    function updModalHeader(e) {
        $("#idmodalEventHeader").text($("#idEventDuration").text());
        /* Set the Event Container's width to 100% so that contents will not overflow outside the modal */
        $("#idContainer").css('width', '100%');
    }

</script>   

<script type="text/javascript">

    var teams = @Html.Raw(Json.Serialize(EventStatsService.TeamStats));
    var sectionevtcnt = @Html.Raw(Json.Serialize(EventStatsService.SectionEventCount));
    var calevents = @Html.Raw(Json.Serialize(Model));

    var teamtree = [];                      /* array */

    //alert(JSON.stringify(teams));
    for (i = 0; i < teams.length; i++) {
        var teamnode    = {};                  /* object for each team */
    var projs       = teams[i].projects;   /* array list of projects */
    var projevtcnts = teams[i].projectEventCounts;
    var projnode    = [];                  /* array of object (project node) */

        for (j = 0; j < projs.length; j++) {
            if (projevtcnts[j] == 0)
                projnode[j] = {text:projs[j], customClass: "project-node", custom: "p", tags: [0], selectable:false };
            else
                projnode[j] = {text:projs[j], customClass: "project-node", custom: "p", tags: [projevtcnts[j]] };
        }
        //alert(teams[i].team + ' ' + JSON.stringify(projnode));

        if (projs.length == 0)
            teamnode = {text:teams[i].team, customClass: "team-node", custom: "t", tags: [0], selectable:false };
        else
            teamnode = {text:teams[i].team, customClass: "team-node", custom: "t", tags: [teams[i].teamEventCount], selectable:(teams[i].teamEventCount>0), nodes:projnode};

        //alert('teamnode ' + JSON.stringify(teamnode));
        teamtree[i] = teamnode;
    }

    /* https://github.com/jonmiles/bootstrap-treeview */
    var teamtreetop = [];

    teamtreetop[0] = {text:"HA Section", customClass: "section-node", nodes:teamtree, state: { selected:true }, tags: [sectionevtcnt] };

    //alert(JSON.stringify(treetop));

    // Some logic to retrieve, or generate tree structure
    $('#teamtree').treeview({
    showTags: true,
        enableLinks: false,
        color: "#337ab7",
        selectedBackColor: "#337ab7",
        data: teamtreetop
    });

    // Unselected will be triggered first. Then, Selected.
    $('#teamtree').on('nodeSelected', function(event, data) {
        //alert(JSON.stringify(calevents));
        //alert(JSON.stringify(data));
        $('#idFilterProject').val("");
        // if 'HA Section ', simply show all events.
        if (data.text == "HA Section")
            $('div[class*=ca-evp-]').show();
        else {
            var eids = GetCalEventIDs(data);

            //alert(eids);
            $('div[class*=ca-evp-]').hide();

            $.each(eids, function(index, value) {
                var cls = 'ca-evp-' + value;
                $('.' + cls).show();
            });
        }
    });

    // Unselected will be triggered first. Then, Selected.
    $('#teamtree').on('nodeUnselected', function(event, data) {
        $('#idFilterProject').val("");
        if (data.text == "HA Section")
            $('div[class*=ca-evp-]').hide();
        else {
            var eids = GetCalEventIDs(data);

            $.each(eids, function(index, value) {
                var cls = 'ca-evp-' + value;
                $('.' + cls).hide();
            });
        }
    });

    // call doFilter() when the page is loaded
    doFilter();

    /* function implementation sections */
    function GetCalEventIDs(node) {
        var eids2show = [];     // Event Ids to show in calendar
        var eids2hide = [];     // Event Ids to hdie from calendar

        for (i = 0; i < calevents.length; i++) {
            var ce = calevents[i];
            var e  = ce.event;

            if (node.custom == "t") {
                if ($.inArray(node.text.toUpperCase(), ce.teams) >= 0)
                    eids2show.push(e.id);
                else
                    eids2hide.push(e.id);
    } else if (node.custom == "p") {
                /* find the parent. i.e. the team of the project */
                var pnode = $('#teamtree').treeview('getParent', node);
                if (pnode) {
                    if ($.inArray(pnode.text.toUpperCase(), ce.teams) >= 0 && $.inArray(node.text.toUpperCase(), ce.projects) >= 0)
                        eids2show.push(e.id);
                    else
                        eids2hide.push(e.id);
                }
            }
        }
        //alert ('Show: ' + eids2show + ', Hide: ' + eids2hide);
        return eids2show;
    }


    function doFilter() {
        var eids2show = [];     // Event Ids to show in calendar

        var proj = $('#idFilterProject').val().toUpperCase().trim();

        if (proj == "") {
            $('div[class*=ca-evp-]').show();
            /* clear all selected node */
            var nodes = $('#teamtree').treeview('getSelected');
            for (i=0; i < nodes.length; i++) {
                $('#teamtree').treeview('unselectNode', [ nodes[i].nodeId, { silent: true} ]);
        }
            /* select the root node */
            $('#teamtree').treeview('selectNode', [ 0, { silent: true} ]);
    } else {
            for (i = 0; i < calevents.length; i++) {
                var ce = calevents[i];
    var e  = ce.event;

                if ($.inArray(proj, ce.projects) >= 0)
                    eids2show.push(e.id);
    }

            $('div[class*=ca-evp-]').hide();

            $.each(eids2show, function(index, value) {
        var cls = 'ca-evp-' + value;
                $('.' + cls).show();
    });

            /* unselect the selected nodes */
            var nodes = $('#teamtree').treeview('getSelected');
            for (i=0; i < nodes.length; i++) {
                $('#teamtree').treeview('unselectNode', [ nodes[i].nodeId, { silent: true} ]);
            }
        }
        $('#idPrevFilterProject').val(proj);
        $('#idNextFilterProject').val(proj);

        $('#idFilterProject').focus();
    }

    /* do the filter when user hit Enter */
    $("#idFilterProject").keypress(function(event) {
        if (event.which == 13) {
            doFilter();
        }
    });

    //$("div[class=rb-ni").click( function() {});

    function doOpenEvent(id) {

        var url = "@((User.IsInRole(Constants.ROLE_ADMIN))? "Edit": "Details")" + "?id=" + id + "&redir=" + encodeURIComponent("Calendar?year=@ViewBag.ViewDate.Year&month=@ViewBag.ViewDate.Month");

        location.href = url;
    };
</script>
