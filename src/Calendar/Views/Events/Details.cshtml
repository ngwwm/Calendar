@model Calendar.Models.CalendarViewModels.CalendarEventViewModel

@inject Calendar.Controllers.AppSettingsController appsettings

@{
    ViewData["Title"] = "Event Details";
    
    string username = (User.Identity.IsAuthenticated)? User.Claims.Where(m => m.Type == "username").SingleOrDefault().Value : "";
}

@functions {

    Boolean IsTeamAcknowledged(string pTeam)
    {
        foreach(var item in Model.Acks)
        {
            if (item.Team == pTeam)
                return true;
        }
        return false;
    }

}

<h2>@ViewData["Title"] - ID @Html.DisplayFor(model => model.Event.ID), @Html.DisplayFor(model => model.EventStatus)</h2>

<div style="position:relative;">
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Event.Subject)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Event.Subject)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.TaskDescription)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Event.TaskDescription)
        </dd>

        <dt>
            @*@Html.DisplayNameFor(model => model.StartDateTime)*@
            Duration
        </dt>
        <dd id="idEventDuration">
            @Html.DisplayFor(model => model.Event.StartDateTime) - @Html.DisplayFor(model => model.Event.EndDateTime)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.EventStatus)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.EventStatus)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.AffectedHosts)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.DisplayAffectedHosts)
            <a target=_blank href="@appsettings.IA_Url?broken=true&server=@Uri.EscapeDataString(Model.Event.AffectedHosts)"><span class='glyphicon glyphicon-flash' style='color:red' title='Perform Impact Analysis'></span></a>
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.AffectedProjects)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.DisplayAffectedProjects)
            <a target=_blank href="@appsettings.IA_Url?system=@Uri.EscapeDataString(Model.Event.AffectedProjects)"><span class='glyphicon glyphicon-flash' style='color:red' title='Perform Impact Analysis'></span></a>
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.AffectedTeams)            
        </dt>
        <dd>
            @*Html.DisplayFor(model => model.DisplayAffectedTeams)*@
            @foreach (var team in Model.Teams)
            {

                var c = (Model.Teams.IndexOf(team) < Model.Teams.Count()-1) ? "," : "";

                if (IsTeamAcknowledged(team))
                {
                    <span id="idAffectedTeam-@team" class="acknowledged" title="@team acknowledged the Event">@team@c</span>
                }
                else
                {
                    <span id="idAffectedTeam-@team" class="not-acknowledged" title="Waiting for @team's acknowledgement">@team@c</span>
                }
            }
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.Category)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Event.Category)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.Environment)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Event.Environment)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.ImpactAnalysis)
        </dt>
        <dd>
            @Html.TextAreaFor(model => model.Event.ImpactAnalysis,5,200, new { @readonly = true, @style = "border-width:1px;", @cols = "200" } )
        </dd>
        <dt>
            <span data-toggle="tooltip" data-placement="top" data-html="true" title="Acknowldege the event"><a role="button" class="@(User.Identity.IsAuthenticated? "":"hidden ")btn btn-primary btn-xs" data-toggle="modal" data-target="#idTeamAckModal" data-whatever=""><span class="glyphicon glyphicon-thumbs-up"></span></a></span>Team ACK
        </dt>
        <dd>
            <div id="idAckPartialView">
                @await Html.PartialAsync("AckPartial", Model.Acks)
                <!--<partial name="AckPartial" model="Model.Acks" />-->
            </div>

        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.MaintProcedure)
        </dt>
        <dd>
            @Html.TextAreaFor(model => model.Event.MaintProcedure, 5, 200, new { @readonly = true, @style = "border-width:1px;", @cols = "200" })
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Event.ActionBy)
        </dt>        
        <dd>
            @Html.DisplayFor(model => model.Event.ActionBy)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.VerificationStep)
        </dt>
        <dd>
            @Html.TextAreaFor(model => model.Event.VerificationStep, 5, 200, new { @readonly = true, @style = "border-width:1px;", @cols = "200" })
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Event.HealthCheckBy)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Event.HealthCheckBy)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Event.FallbackProcedure)
        </dt>
        <dd>
            @Html.TextAreaFor(model => model.Event.FallbackProcedure, 5, 200, new { @readonly = true, @style = "border-width:1px;", @cols = "200" })
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.Reference)
        </dt>
        <dd>
            @if (!System.String.IsNullOrEmpty(Model.Event.Reference))
            {
                <a target=_blank href="@appsettings.CM_Url?i_CRN=@Model.Event.Reference">@Html.DisplayFor(model => model.Event.Reference)</a>
            }            
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.Result)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Event.Result)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.RiskLevel)
        </dt>
        <dd>
            <span class="cal-risklevel-@Model.Event.RiskLevel" stylex="font-size:14px">@Model.RiskLevel</span>
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Event.RiskAnalysis)
        </dt>
        <dd>            
            @Html.TextAreaFor(model => model.Event.RiskAnalysis, 5, 200, new { @readonly = true, @style = "border-width:1px;", @cols = "200" })
        </dd>      
        <dt>
            <span data-toggle="tooltip" data-placement="top" data-html="true" title="Add the attachment"><a role="button" class="@(User.Identity.IsAuthenticated? "":"hidden ")btn btn-primary btn-xs" data-toggle="modal" data-target="#AttachModal" data-whatever=""><span class="glyphicon glyphicon-paperclip"></span></a></span>Attachment
        </dt>
        <dd>
            <div id="idAttachPartialView" style1="position:absolute; top:60px; left:620px; height:200px; overflow:hidden">
                @await Html.PartialAsync("AttachPartial", Model.Attachs)
                <!--<partial name="AttachPartial" model="Model.Attachs" />-->
            </div>
        </dd>

        <dt>Last Updated</dt>
        <dd>
           <i>@Html.DisplayFor(model => model.Event.UpdatedDate)</i>
        </dd>
</dl>
     
</div>

<div @(ViewBag.Modal != null ? "hidden" : "")>

        @if (@ViewBag.Redir != null)
        {
        <span @(User.IsInRole("Admins") ? "" : "hidden")><a href='@Context.Request.PathBase/Events/Edit?id=@Model.Event.ID&redir=@Uri.EscapeDataString(ViewBag.Redir)'>Edit</a> |</span>
        <a href="@Uri.UnescapeDataString(ViewBag.Redir)">Back</a>
        }
        else
        {
        <span @(User.IsInRole("Admins") ? "" : "hidden")><a href='@Context.Request.PathBase/Events/Edit?id=@Model.Event.ID'>Edit</a> |</span>
        <a asp-action="Index">Back</a>
        }

</div>

<!--Team Acknowledgement Modal-->
<div class="modal fade" id="idTeamAckModal" tabindex="-1" role="dialog" aria-labelledby="teamAckModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="exampleModalLabel">Team Acknowledgement</h4>
            </div>
            <div class="modal-body">
                <form id="idFormTeamAck" name="FormTeamAck" class="row" asp-controller="Acknowledgements" asp-action="Create" method="post">
                    <div class="form-group col-md-8">
                        <select id="idTeam" name="team" class="form-control select-placeholder"></select>
                        <span id="idTeamFieldValidationError" class="text-danger hidden">The Team field is required.</span>
                        <input type="hidden" class="form-control" id="idTeamAckEventID" name="EventID" value="@Model.Event.ID">
                        <input type="hidden" class="form-control" id="idTeakAckRedir" name="redir" value="@ViewBag.Redir">
                        <input type="hidden" class="form-control" id="idAjax" name="ajax" value="true">
                        <textarea rows="5" class="form-control" id="idAckMessage" name="AckMessage" placeholder="Message"></textarea>
                    </div>
                    <div class="form-group col-md-4 text-right">
                        <button type="submit" class="btn btn-ms btn-primary">Save</button>
                        <button type="button" class="btn btn-ms btn-primary" data-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!--Attachment Modal-->
<div class="modal fade" id="AttachModal" tabindex="-1" role="dialog" aria-labelledby="AttachModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="exampleModalLabel">Attachment</h4>
            </div>
            <div class="modal-body">
                <form id="idFormAttach" name="FormAttach" class="row" enctype="multipart/form-data" asp-controller="Attachments" asp-action="Upload" method="post">
                    <div class="form-group col-md-10">
                        <input type="file" id="idFile" name="AttachFile" multiple class="file-loading">
                        <div id="kv-error-1" class="alert alert-danger fade in" style="margin-top:10px;display:none"></div>
                        <!--<div id="kv-success-1" class="alert alert-success fade in" style="margin-top:10px;display:none"></div>-->
                        <input type="hidden" class="form-control" id="idAttachEventID" name="EventID" value="">
                        <input type="hidden" class="form-control" id="idRedir" name="redir" value="this">
                        <input type="hidden" class="form-control" id="idAjax" name="ajax" value="true">
                    </div>
                    <div class="form-group col-md-2 text-right">
                        <button type="button" class="btn btn-ms btn-primary" data-dismiss="modal" id="idCloseBtn">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    /* ------ Team Acknowledgement START HERE ------ */
    $(document).ready(function () {
        /* pass the EventID and AffectedTeams to the Modal Form */
        $('#idTeamAckModal').on('shown.bs.modal', function () {
            $('#idTeam').focus()
        });

        $('#idTeamAckModal').on('show.bs.modal', function () {
            /* update the team selection list */
            var str = "@Model.Event.AffectedTeams";

            $('#idAckMessage').val('');
            $('#idTeam')
                .find('option')
                .remove()
                .end()
                .append('<option selected disabled>Team</option>')
            ;
            $('#idTeam').addClass('select-placeholder');
            $.each(str.split(','), function (key, value) {
                $('#idTeam').append('<option value="' + value + '">' + value + '</option>');
            });
        });

        /* mimic placeholder for dropdown list. Not quite work in FF. */
        $('select').change(function () {
            if ($(this).children('option:first-child').is(':selected')) {
                $(this).addClass('select-placeholder');
            } else {
                $(this).removeClass('select-placeholder');
            }
            $("#idTeamFieldValidationError").addClass('hidden');
        });

        /* Bind the Form submit - Save */
        $('#idFormTeamAck').on('submit', function (e) {
            var team = $(this).find('select[name="team"]').val();
            var eventid = $(this).find('input[name="EventID"]').val();

            if (team == null) {
                e.preventDefault();
                $("#idTeamFieldValidationError").removeClass('hidden');
            }
            else {
                /* 1st ajax call to save the acknowledgement (modal)
                   2nd ajax call to refresh the partial view */
                e.preventDefault();
                $.ajax({
                    type: $(this).attr('method'),
                    url: $(this).attr('action'),
                    data: $(this).serialize(),
                    success: function (result) {
                        $.ajax({
                            type: "get",
                            url: '@Url.Action("IndexPartial","Acknowledgements")',
                            data: 'eventid=' + eventid,
                            cache: false,
                            success: function (result) {
                                $("#idAckPartialView").html(result);
                                $('#idAffectedTeam-' + team).removeClass('not-acknowledged');
                                $('#idAffectedTeam-' + team).addClass('acknowledged');
                                $('#idTeamAckModal').removeClass('fade');
                                $('#idTeamAckModal').modal('hide');
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert('Status: ' + textStatus + ', Error: ' + errorThrown);
                            }
                        });
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert('Status: ' + textStatus + ', Error: ' + errorThrown);
                    }
                });
            }
        });
        //});
        /* ------ Team Acknowledgement END HERE ------ */


        /* ------ ATTACHMENTS CODE BEGIN HERE ------ */
        $("#idFile").fileinput({
            theme: "explorer",
            uploadUrl: '@Url.Action("AjaxUpload", "Attachments")', // server upload action
            uploadAsync: true,      // enable ajax upload
            dropZoneEnabled: false, // disable drag and drop file function
            maxFileCount: 5,
            overwriteInitial: false,
            previewFileIcon: '<i class="fa fa-file"></i>',
            initialPreviewAsData: true, // defaults markup
            fileActionSettings: {
                removeTitle: 'Remove file from list',   // tooltip for remove button in file list
                showZoom: false                         // disable review file button
            },
            layoutTemplates: {
                preview: '<div class="file-preview {class}">\n' +
                '    <div class="{dropClass}">\n' +
                '    <table class="table table-bordered table-hover"><tbody class="file-preview-thumbnails">\n' +
                '    </tbody></table>\n' +
                '    <div class="clearfix"></div>' +
                '    <div class="file-preview-status text-center text-success"></div>\n' +
                '    <div id="errdiv" class="kv-fileinput-error" style="display:none;" ></div>\n' +
                '    </div>\n' +
                '</div>'
            },
            uploadExtraData: function (previewId, index) {
                var obj = {};
                if (previewId == undefined)
                {
                    return obj;
                } else {
                    obj = { EventID: "@Model.Event.ID", redir: "@ViewBag.ReDir" };
                }
                return obj;
            },
            allowedFileExtensions: ["jpg", "png", "gif", "pdf", "doc", "docx", "xls", "xlsx", "xlsm", "ppt", "pptx", "txt", "log", "zip", "7z", "msg"],
            preferIconicPreview: true, // this will force thumbnails to display icons for following file extensions
            previewFileIconSettings: { // configure your icon file extensions
                'doc': '<i class="fa fa-file-word-o text-primary"></i>',
                'xls': '<i class="fa fa-file-excel-o text-success"></i>',
                'ppt': '<i class="fa fa-file-powerpoint-o text-danger"></i>',
                'pdf': '<i class="fa fa-file-pdf-o text-danger"></i>',
                'zip': '<i class="fa fa-file-zip-o text-muted"></i>',
                'htm': '<i class="fa fa-file-code-o text-info"></i>',
                'txt': '<i class="fa fa-file-text-o text-info"></i>',
                'mov': '<i class="fa fa-file-movie-o text-warning"></i>',
                'mp3': '<i class="fa fa-file-audio-o text-warning"></i>',
                // note for these file types below no extension determination logic
                // has been configured (the keys itself will be used as extensions)
                'jpg': '<i class="fa fa-file-photo-o text-danger"></i>',
                'gif': '<i class="fa fa-file-photo-o text-muted"></i>',
                'png': '<i class="fa fa-file-photo-o text-primary"></i>',
                'msg': '<i class="fa fa-envelope-o text-warning"></i>'
            },
            previewFileExtSettings: { // configure the logic for determining icon file extensions
                'doc': function(ext) {
                    return ext.match(/(doc|docx)$/i);
                },
                'xls': function(ext) {
                    return ext.match(/(xls|xlsx)$/i);
                },
                'ppt': function(ext) {
                    return ext.match(/(ppt|pptx)$/i);
                },
                'zip': function(ext) {
                    return ext.match(/(zip|rar|tar|gzip|gz|7z)$/i);
                },
                'htm': function(ext) {
                    return ext.match(/(htm|html)$/i);
                },
                'txt': function(ext) {
                    return ext.match(/(txt|ini|csv|java|php|js|css)$/i);
                },
                'mov': function(ext) {
                    return ext.match(/(avi|mpg|mkv|mov|mp4|3gp|webm|wmv)$/i);
                },
                'mp3': function(ext) {
                    return ext.match(/(mp3|wav)$/i);
                },
            }
        //});
        }).on('fileclear', function(event) {
        // trigger when file input remove button or close button is pressed
            console.log("fileclear");
            HideCustomErrPanel();
        }).on('fileremoved', function(event, id, index) {
        // remove corresponding error message after file removed
            console.log('id = ' + id + ', index = ' + index);
            $('#null #null').remove();
            $('#null').remove();
            $('#'+index+' #'+id).remove();
            $('#'+index).remove();
            if ($('div#kv-error-1').children('ul').length == 0) {
                HideCustomErrPanel();
            };
        }).on('filedeleted', function(event, key, jqXHR, data) {
        // trigger after deletion of corresponding file
            console.log('Key = ' + key);
            HideCustomErrPanel();
        }).on('filesuccessremove', function(event, id) {
            console.log('File success remove');
            if ($('ul#null').length == 1) { // for no files selected error
                if ($("div .file-caption-name span").text().trim() == "No files selected") {
                    // for file list panel is empty
                    // clear the error and hide Remove and Upload button
                    $('.fileinput-remove-button').click();
                } else {
                    // for the file list panel contains file
                    $('#null #null').remove();
                    $('#null').remove();
                    $('div .file-input').removeClass('has-error');
                    $('div .file-caption-name').attr('title', $('div .file-caption-name').val());
                    $('div .file-caption-name i').removeClass('glyphicon-exclamation-sign');
                    $('div .file-caption-name i').addClass('glyphicon-file kv-caption-icon');
                    $('div .file-caption-name span').removeClass('text-danger');
                    if ($('div#kv-error-1').children('ul').length == 0) {
                        HideCustomErrPanel();
                    };
                }
            } 
        }).on('filebrowse', function(event) {
        // trigger when browse button is clicked
            console.log('File browse');

            if ($('ul#null').length == 1) { // for no files selected error
                if ($("div .file-caption-name span").text().trim() == "No files selected") {
                    // for file list panel is empty
                    // clear the error and hide Remove and Upload button
                    $('.fileinput-remove-button').click();
                } else {
                    // for the file list panel contains file
                    $('#null #null').remove();
                    $('#null').remove();
                    $('div .file-input').removeClass('has-error');
                    $('div .file-caption-name').attr('title', $('div .file-caption-name').val());
                    $('div .file-caption-name i').removeClass('glyphicon-exclamation-sign');
                    $('div .file-caption-name i').addClass('glyphicon-file kv-caption-icon');
                    $('div .file-caption-name span').removeClass('text-danger');
                    if ($('div#kv-error-1').children('ul').length == 0) {
                        HideCustomErrPanel();
                    };
                }
            } else { // for other error
                HideCustomErrPanel();
            }
        }).on('filepreajax', function(event, previewId, index) {
            // clear error panel before each upload submission
            console.log('File pre ajax triggered');
            HideCustomErrPanel();
        }).on('fileselectnone', function(event) {
            console.log('File select test');
        }).on('fileuploaded', function(event, data, msg) {
        // change Close button to Done button after upload successfully
            var form = data.form, files = data.files, extra = data.extra,
                response = data.response, reader = data.reader;
            console.log("fileuploaded");
            $('#idCloseBtn').text('Done');
        }).on('fileuploaderror', function(event, data, msg) {
        // handle upload error and file input validation error for ajax upload

            console.log("load error");
            if (data != null) {
                var form = data.form, files = data.files, extra = data.extra,
                    response = data.response, reader = data.reader;

                if (data.index == null) { // for file count > max count
                    RedirectToCustomErrPanel(null, null, msg);
                } else {
                    //alert(data.filenames[data.index]);
                    //alert('<b>'+data.files[data.index].name+': </b></n>'+msg);
                    //alert(msg.search('<b>'+data.files[data.index].name+': </b>'));
                    RedirectToCustomErrPanel(data.id, data.index, msg);
                }
            } else { // for no data to upload error
                RedirectToCustomErrPanel(null, null, msg);
            }
        }).on('filebatchuploadcomplete', function(event, files, extra) {
        // original error panel always shows an empty box, so custom error panel is used instead
        // hide original error panel when upload completed
            console.log('File batch upload complete');
            HideOriginalErrPanel();
        });

        /* Hide the fileinput error panel */
        $('#errdiv').bind('DOMAttrModified', function(event) {
            $('.kv-fileinput-error').attr("style","display: none;");
        })

        /* Clear the loaded file when re-open the diag */
        $('#AttachModal').on('show.bs.modal', function () {
            $('.fileinput-remove-button').click();
            $('#idCloseBtn').text('Close');
        })

        /* Refresh the parital view after attachment diag close */
        $('#AttachModal').on('hidden.bs.modal', function (e) {
            var eventid = @Model.Event.ID;

            if (eventid == null) {
                e.preventDefault();
            }
            else {
                /*  1st ajax call to save the attachment (modal)
                    2nd ajax call to refresh the partial view */
                e.preventDefault();
                $.ajax({
                    type: $(this).attr('method'),
                    url: $(this).attr('action'),
                    data: new FormData(this),
                    cache: false,
                    processData: false, // Don't process the files
                    contentType: false, // Set content type to false as jQuery will tell the server its a query string request
                    success: function (result) {
                        $.ajax({
                            type: "get",
                            cache: false,
                            url: '@Url.Action("IndexPartial", "Attachments")',
                            data: 'eventid=' + eventid,
                            success: function (result) {
                                $("#idAttachPartialView").html(result);
                                $('#AttachModal').modal('hide');
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert('Status: ' + textStatus + ', Error: ' + errorThrown);
                            }
                        });
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert('Status: ' + textStatus + ', Error: ' + errorThrown);
                    }
                });
            }
        })

        /* Bind the Form submit - Save */
        $('#idFormAttach').on('submit', function (e) {
            var eventid = $(this).find('input[name="EventID"]').val();

            if (eventid == null) {
                e.preventDefault();
            }
            else {
                /* 1st ajax call to save the attachment (modal)
                    2nd ajax call to refresh the partial view */
                e.preventDefault();
                $.ajax({
                    type: $(this).attr('method'),
                    url: $(this).attr('action'),
                    data: new FormData(this),
                    cache: false,
                    processData: false, // Don't process the files
                    contentType: false, // Set content type to false as jQuery will tell the server its a query string request
                    success: function (result) {
                        $.ajax({
                            type: "get",
                            cache: false,
                            url: '@Url.Action("IndexPartial", "Attachments")',
                            data: 'eventid=' + eventid,
                            success: function (result) {
                                $("#idAttachPartialView").html(result);
                                $('#AttachModal').modal('hide');
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert('Status: ' + textStatus + ', Error: ' + errorThrown);
                            }
                        });
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert('Status: ' + textStatus + ', Error: ' + errorThrown);
                    }
                });
            }
        });

    });

    /* function to hide the error panel
     * Since the error panel for file upload does not work as expected,
     * we redirect the error message to custom error panel and hide the
     * original error panel
     */
    function HideOriginalErrPanel() {
        $('.kv-fileinput-error').empty();
        $('.kv-fileinput-error').attr("style","display: none;");
        $('.kv-upload-progress').addClass("hide");
    }

    function HideCustomErrPanel() {
        $('#kv-error-1').attr("style","margin-top:10px;display:none;");
        $('#kv-error-1').empty();
        //$('div .file-input .theme-explorer').removeClass('has-error');
        $('div .file-caption-name i').removeClass('glyphicon-exclamation-sign');
        $('div .file-caption-name i').addClass('glyphicon-file kv-caption-icon');
        $('div .file-caption-name span').removeClass('text-danger');
        $('div .file-caption-name').removeClass('text-danger');
    }

    function RedirectToCustomErrPanel(id, index, msg) {
        if (id == null) {
            $('#kv-error-1').empty();
        } else {
            // to get the correct index number for file
            index=id.substr(id.lastIndexOf('-')+1, id.length-id.lastIndexOf('-')-1);        
        }
        
        $('#kv-error-1').append('<ul id="'+index+'" ><li id="' + id + '" >' + msg + "</li></ul>");
        $('#kv-error-1').attr("style","margin-top:10px;display:");

        $('div .file-caption-name i').addClass('glyphicon-exclamation-sign');
        $('div .file-caption-name i').removeClass('glyphicon-file kv-caption-icon');
        $('div .file-caption-name').addClass('text-danger');
    }

    /* ------ ATTACHMENTS CODE END HERE ------ */

</script>
